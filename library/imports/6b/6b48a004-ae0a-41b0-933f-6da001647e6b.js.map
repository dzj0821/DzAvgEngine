{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\Script\\parsers/assets\\Script\\parsers\\DialogCommandParser.ts"],"names":[],"mappings":";;;;;AAAA,mEAA8D;AAC9D,8DAAyD;AACzD,wDAAmD;AACnD,oDAA+C;AAC/C,uDAAkD;AAClD,4CAAuC;AACvC,yDAAoD;AACpD,0DAAqD;AAE/C,IAAA,kBAAmC,EAAlC,oBAAO,EAAE,sBAAQ,CAAkB;AAG1C;IAAiD,uCAAsB;IAAvE;;IAkCA,CAAC;IAhCG,mCAAK,GAAL;QACI,0BAAgB,CAAC,eAAe,CAAC,CAAC,6BAAmB,CAAC,CAAC,CAAC;IAC5D,CAAC;IAED,mCAAK,GAAL,UAAM,WAAW;QACb,IAAI,mBAAmB,GAAG,6BAAmB,CAAC,QAAQ,CAAC;QACvD,QAAO,WAAW,CAAC,OAAO,EAAC;YACvB,KAAK,EAAE;gBACH,wBAAc,CAAC,QAAQ,CAAC,MAAM,GAAG,uBAAa,CAAC,IAAI,CAAC;gBACpD,IAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,EAAC;oBACrC,IAAG,OAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,QAAQ,EAAC;wBACpC,EAAE,CAAC,KAAK,CAAC,uCAAuC,CAAC,CAAC;wBAClD,OAAO;qBACV;oBACD,IAAI,eAAe,GAAG,oBAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;oBACnE,IAAG,CAAC,CAAC,eAAe,YAAY,yBAAe,CAAC,EAAC;wBAC7C,EAAE,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC;wBACnC,OAAO;qBACV;oBACD,6BAAmB,CAAC,QAAQ,CAAC,gBAAgB,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;oBAC7E,6BAAmB,CAAC,QAAQ,CAAC,qBAAqB,CAAC,eAAe,CAAC,sBAAsB,CAAC,CAAC;oBAC3F,6BAAmB,CAAC,QAAQ,CAAC,iBAAiB,CAAC,eAAe,CAAC,kBAAkB,CAAC,CAAC;iBACtF;gBACD,WAAW,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAC/C,IAAI,YAAY,GAAG,2BAAiB,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAA;gBACtE,mBAAmB,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;gBAC9C,MAAM;YACV;gBACI,OAAO;SACd;IACL,CAAC;IAhCgB,mBAAmB;QADvC,OAAO;OACa,mBAAmB,CAkCvC;IAAD,0BAAC;CAlCD,AAkCC,CAlCgD,gCAAsB,GAkCtE;kBAlCoB,mBAAmB","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\Script\\parsers","sourcesContent":["import CommandParserInterface from \"./CommandParserInterface\";\r\nimport DialogWindowManager from \"../DialogWindowManager\";\r\nimport ManagerInterface from \"../ManagerInterface\";\r\nimport ContentManager from \"../ContentManager\";\r\nimport ContentStatus from \"../enum/ContentStatus\";\r\nimport VarManager from \"../VarManager\";\r\nimport CharacterStatus from \"../vo/CharacterStatus\";\r\nimport TextFormatManager from \"../TextFormatManager\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class DialogCommandParser extends CommandParserInterface {\r\n\r\n    start () {\r\n        ManagerInterface.managersIsExist([DialogWindowManager]);\r\n    }\r\n\r\n    parse(jsonMessage) {\r\n        let dialogWindowManager = DialogWindowManager.instance;\r\n        switch(jsonMessage.Command){\r\n            case \"\":\r\n                ContentManager.instance.status = ContentStatus.Wait;\r\n                if(!this.isExistNull([jsonMessage.Arg1])){\r\n                    if(typeof(jsonMessage.Arg1) != \"string\"){\r\n                        cc.error(\"如果对话需要参数，则应传入一个类型为CharacterStatus的变量名\");\r\n                        return;\r\n                    }\r\n                    let characterStatus = VarManager.instance.getVar(jsonMessage.Arg1);\r\n                    if(!(characterStatus instanceof CharacterStatus)){\r\n                        cc.error(\"变量类型必须是CharacterStatus\");\r\n                        return;\r\n                    }\r\n                    DialogWindowManager.instance.setCharacterName(characterStatus.characterName);\r\n                    DialogWindowManager.instance.setCharacterNameImage(characterStatus.characterNameImagePath);\r\n                    DialogWindowManager.instance.setCharacterImage(characterStatus.characterImagePath);\r\n                }\r\n                jsonMessage.Text = jsonMessage.Text.toString();\r\n                let formatedText = TextFormatManager.instance.format(jsonMessage.Text)\r\n                dialogWindowManager.setMainText(formatedText);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n}\r\n"]}